"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradingViewAPI = void 0;
var TickerSubscription_1 = require("./TickerSubscription");
var TradingViewWebSocket_1 = require("./TradingViewWebSocket");
var TradingViewAPI = /** @class */ (function () {
    function TradingViewAPI() {
        this.subscriptionMap = new Map();
        this.ws = new TradingViewWebSocket_1.TradingViewWebSocket();
    }
    TradingViewAPI.prototype.setup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.ws.on('data', function (simpleOrProName, status, data) {
                            if (status !== 'ok') {
                                return;
                            }
                            var subs = _this.subscriptionMap.get(simpleOrProName);
                            if (!subs) {
                                return;
                            }
                            subs.forEach(function (s) {
                                if (s.canBeDestroyed) {
                                    subs.delete(s);
                                    s.destroyed = true;
                                    if (subs.size === 0) {
                                        _this.ws.unregisterSymbol(s.simpleOrProName);
                                        _this.subscriptionMap.delete(s.simpleOrProName);
                                    }
                                    return;
                                }
                                s.updateData(data);
                            });
                        });
                        return [4 /*yield*/, this.ws.connect()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TradingViewAPI.prototype.cleanup = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.ws.disconnect();
                return [2 /*return*/];
            });
        });
    };
    TradingViewAPI.prototype.getTicker = function (simpleOrProName) {
        return __awaiter(this, void 0, void 0, function () {
            var tickers, ticker;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tickers = this.subscriptionMap.get(simpleOrProName);
                        if (tickers) {
                            return [2 /*return*/, tickers.entries().next().value];
                        }
                        ticker = new TickerSubscription_1.TickerSubscription(this, simpleOrProName);
                        return [4 /*yield*/, ticker.fetch()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, ticker];
                }
            });
        });
    };
    TradingViewAPI.prototype.ensureRegistered = function (ticker) {
        return __awaiter(this, void 0, void 0, function () {
            var tickers;
            var _this = this;
            return __generator(this, function (_a) {
                tickers = this.subscriptionMap.get(ticker.simpleOrProName);
                if (tickers && tickers.has(ticker)) {
                    return [2 /*return*/];
                }
                // eslint-disable-next-line no-async-promise-executor
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var updated, onUpdate;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    updated = false;
                                    onUpdate = function (data) {
                                        if (!data.pro_name) {
                                            return;
                                        }
                                        updated = true;
                                        ticker.removeListener('update', onUpdate);
                                        resolve();
                                    };
                                    ticker.on('update', onUpdate);
                                    if (!!tickers) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.ws.registerSymbol(ticker.simpleOrProName)];
                                case 1:
                                    _a.sent();
                                    this.subscriptionMap.set(ticker.simpleOrProName, new Set([ticker]));
                                    return [3 /*break*/, 4];
                                case 2:
                                    if (!!tickers.has(ticker)) return [3 /*break*/, 4];
                                    return [4 /*yield*/, this.ws.registerSymbol(ticker.simpleOrProName)];
                                case 3:
                                    _a.sent();
                                    this.subscriptionMap.set(ticker.simpleOrProName, tickers.add(ticker));
                                    _a.label = 4;
                                case 4:
                                    setTimeout(function () {
                                        if (!updated) {
                                            ticker.removeListener('update', onUpdate);
                                            reject('Timed out.');
                                        }
                                    }, 3000);
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    return TradingViewAPI;
}());
exports.TradingViewAPI = TradingViewAPI;
//# sourceMappingURL=TradingViewAPI.js.map